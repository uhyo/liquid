type token =
  | BOOL of (bool)
  | INT of (int)
  | IDENT of (string)
  | NOT
  | LT
  | LE
  | GT
  | GE
  | EQ
  | FUN
  | RARROW
  | IF
  | THEN
  | ELSE
  | LET
  | IN
  | REC
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

open Syntax

# 30 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* LT *);
  262 (* LE *);
  263 (* GT *);
  264 (* GE *);
  265 (* EQ *);
  266 (* FUN *);
  267 (* RARROW *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* LET *);
  272 (* IN *);
  273 (* REC *);
  274 (* LPAREN *);
  275 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\000\000"

let yylen = "\002\000\
\003\000\001\000\001\000\001\000\001\000\004\000\002\000\006\000\
\006\000\008\000\002\000\003\000\003\000\003\000\003\000\001\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\016\000\002\000\003\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\012\000\013\000"

let yysindex = "\255\255\
\007\255\000\000\000\000\000\000\000\000\000\000\007\255\000\255\
\007\255\255\254\007\255\159\255\000\000\159\255\249\254\095\255\
\253\254\012\255\087\255\007\255\007\255\007\255\007\255\000\000\
\007\255\007\255\007\255\015\255\000\000\011\255\011\255\011\255\
\011\255\159\255\109\255\123\255\014\255\007\255\007\255\007\255\
\159\255\159\255\141\255\007\255\159\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\005\000\020\000\
\024\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\040\000\000\000\000\000\044\000"

let yygindex = "\000\000\
\026\000\042\000"

let yytablesize = 319
let yytable = "\001\000\
\012\000\017\000\015\000\025\000\014\000\027\000\003\000\004\000\
\005\000\006\000\007\000\004\000\005\000\006\000\028\000\018\000\
\008\000\037\000\009\000\013\000\017\000\010\000\040\000\015\000\
\011\000\000\000\000\000\011\000\011\000\000\000\000\000\006\000\
\014\000\000\000\016\000\008\000\019\000\000\000\000\000\009\000\
\000\000\000\000\000\000\010\000\000\000\030\000\031\000\032\000\
\033\000\000\000\034\000\035\000\036\000\024\000\000\000\024\000\
\000\000\024\000\000\000\000\000\024\000\000\000\000\000\041\000\
\042\000\043\000\000\000\000\000\000\000\045\000\000\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\000\000\000\000\
\000\000\000\000\024\000\024\000\024\000\000\000\024\000\004\000\
\005\000\006\000\000\000\020\000\021\000\022\000\023\000\004\000\
\005\000\006\000\000\000\020\000\021\000\022\000\023\000\000\000\
\011\000\029\000\000\000\026\000\000\000\004\000\005\000\006\000\
\011\000\020\000\021\000\022\000\023\000\000\000\000\000\000\000\
\000\000\000\000\038\000\004\000\005\000\006\000\011\000\020\000\
\021\000\022\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\000\000\000\011\000\004\000\005\000\006\000\
\000\000\020\000\021\000\022\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\000\000\011\000\004\000\
\005\000\006\000\000\000\020\000\021\000\022\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000\012\000\012\000\
\012\000\014\000\014\000\014\000\014\000\012\000\012\000\000\000\
\012\000\014\000\014\000\012\000\014\000\000\000\000\000\014\000\
\013\000\013\000\013\000\013\000\015\000\015\000\015\000\015\000\
\013\000\013\000\000\000\013\000\015\000\015\000\013\000\015\000\
\011\000\011\000\015\000\011\000\006\000\006\000\011\000\006\000\
\008\000\008\000\006\000\008\000\009\000\009\000\008\000\009\000\
\010\000\010\000\009\000\010\000\000\000\000\000\010\000"

let yycheck = "\001\000\
\000\000\003\001\003\001\011\001\000\000\009\001\000\001\001\001\
\002\001\003\001\004\001\001\001\002\001\003\001\003\001\017\001\
\010\001\003\001\012\001\000\000\000\000\015\001\009\001\000\000\
\018\001\255\255\255\255\000\000\018\001\255\255\255\255\000\000\
\007\000\255\255\009\000\000\000\011\000\255\255\255\255\000\000\
\255\255\255\255\255\255\000\000\255\255\020\000\021\000\022\000\
\023\000\255\255\025\000\026\000\027\000\012\000\255\255\014\000\
\255\255\016\000\255\255\255\255\019\000\255\255\255\255\038\000\
\039\000\040\000\255\255\255\255\255\255\044\000\255\255\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\255\255\255\255\
\255\255\255\255\041\000\042\000\043\000\255\255\045\000\001\001\
\002\001\003\001\255\255\005\001\006\001\007\001\008\001\001\001\
\002\001\003\001\255\255\005\001\006\001\007\001\008\001\255\255\
\018\001\019\001\255\255\013\001\255\255\001\001\002\001\003\001\
\018\001\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\014\001\001\001\002\001\003\001\018\001\005\001\
\006\001\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\255\255\018\001\001\001\002\001\003\001\
\255\255\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\016\001\255\255\018\001\001\001\
\002\001\003\001\255\255\005\001\006\001\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\005\001\006\001\007\001\008\001\013\001\014\001\255\255\
\016\001\013\001\014\001\019\001\016\001\255\255\255\255\019\001\
\005\001\006\001\007\001\008\001\005\001\006\001\007\001\008\001\
\013\001\014\001\255\255\016\001\013\001\014\001\019\001\016\001\
\013\001\014\001\019\001\016\001\013\001\014\001\019\001\016\001\
\013\001\014\001\019\001\016\001\013\001\014\001\019\001\016\001\
\013\001\014\001\019\001\016\001\255\255\255\255\019\001"

let yynames_const = "\
  NOT\000\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  EQ\000\
  FUN\000\
  RARROW\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : BType.t Syntax.t) in
    Obj.repr(
# 43 "parser.mly"
    ( _2 )
# 215 "parser.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 45 "parser.mly"
    ( Bool _1 )
# 222 "parser.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 47 "parser.mly"
    ( Int _1 )
# 229 "parser.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 49 "parser.mly"
    ( Var _1 )
# 236 "parser.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_exp) in
    Obj.repr(
# 53 "parser.mly"
    ( _1 )
# 243 "parser.ml"
               : BType.t Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : BType.t Syntax.t) in
    Obj.repr(
# 56 "parser.mly"
    ( Lambda((BType.newtype(), _2), _4) )
# 251 "parser.ml"
               : BType.t Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : BType.t Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_exp) in
    Obj.repr(
# 59 "parser.mly"
    ( App(_1, _2) )
# 259 "parser.ml"
               : BType.t Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : BType.t Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : BType.t Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : BType.t Syntax.t) in
    Obj.repr(
# 62 "parser.mly"
    ( If(_2, _4, _6) )
# 268 "parser.ml"
               : BType.t Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : BType.t Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : BType.t Syntax.t) in
    Obj.repr(
# 65 "parser.mly"
    ( Let((BType.newtype(), _2), _4, _6) )
# 277 "parser.ml"
               : BType.t Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : BType.t Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : BType.t Syntax.t) in
    Obj.repr(
# 68 "parser.mly"
    ( LetRec((BType.newtype(), _3), ((BType.newtype(), _4), _6), _8) )
# 287 "parser.ml"
               : BType.t Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : BType.t Syntax.t) in
    Obj.repr(
# 70 "parser.mly"
    ( Not _2 )
# 294 "parser.ml"
               : BType.t Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : BType.t Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : BType.t Syntax.t) in
    Obj.repr(
# 72 "parser.mly"
    ( Lt(_1, _3) )
# 302 "parser.ml"
               : BType.t Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : BType.t Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : BType.t Syntax.t) in
    Obj.repr(
# 74 "parser.mly"
    ( Gt(_1, _3) )
# 310 "parser.ml"
               : BType.t Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : BType.t Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : BType.t Syntax.t) in
    Obj.repr(
# 76 "parser.mly"
    ( Le(_1, _3) )
# 318 "parser.ml"
               : BType.t Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : BType.t Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : BType.t Syntax.t) in
    Obj.repr(
# 78 "parser.mly"
    ( Ge(_1, _3) )
# 326 "parser.ml"
               : BType.t Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
    ( failwith
        (let {
                Lexing.pos_lnum = s_lnum;
                Lexing.pos_cnum = s_cnum;
                Lexing.pos_bol = s_bol
             } = Parsing.symbol_start_pos () in
        let {
                Lexing.pos_lnum = e_lnum;
                Lexing.pos_cnum = e_cnum;
                Lexing.pos_bol = e_bol
             } = Parsing.symbol_end_pos () in
        (Printf.sprintf "parse error near (%d, %d)-(%d, %d)"
           s_lnum (s_cnum - s_bol)
           e_lnum (e_cnum - e_bol)
           )) )
# 346 "parser.ml"
               : BType.t Syntax.t))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : BType.t Syntax.t)
